<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 定义一个映射配置文件的根节点 -->
<!-- namespace 属性用来定义配置命名空间， 主要进行 session 级别的缓存管理 -->
<!-- namespace 默认使用当前操作实体类的全路径 -->
<mapper namespace="com.kiss.kissnest.mapper.ProjectMapper">

    <insert id="createProject" parameterType="com.kiss.kissnest.entity.Project" keyProperty="id" useGeneratedKeys="true">
        insert into projects (name,teamId,groupId,slug,membersCount,operatorId,operatorName,type)
        value
        (#{name},#{teamId},#{groupId},#{slug},#{membersCount},#{operatorId},#{operatorName},#{type})
    </insert>
    
    <delete id="deleteProjectById" parameterType="java.lang.Integer">
        delete from projects where id = #{id}
    </delete>
    
    <update id="updateProject" parameterType="com.kiss.kissnest.entity.Project">
        update projects
        set
        id = #{id}
        <if test="name != null">
            ,name = #{name}
        </if>
        <if test="teamId != null">
            ,teamId = #{teamId}
        </if>
        <if test="slug != null">
            ,slug = #{slug}
        </if>
        <if test="teamId != null">
            ,groupId = #{groupId}
        </if>
        <if test="operatorId != null">
            ,operatorId = #{operatorId}
        </if>
        <if test="operatorName != null">
            ,operatorName = #{operatorName}
        </if>
        <if test="type != null">
            ,type = #{type}
        </if>
        where id = #{id}
    </update>
    
    <update id="addCount" parameterType="java.util.Map">
        update projects
        set 
        <if test="type == 'members'">
            membersCount = membersCount + #{increments}
        </if>
        <if test="type == 'needs'">
            needsCount = needsCount + #{increments}
        </if>
        <if test="type == 'issues'">
            issuesCount = issuesCount + #{increments}
        </if>
        where id = #{id}
    </update>

    <select id="getProjectById" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects where id = #{id};
    </select>

    <select id="getProjects" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects
        where
        teamId = #{teamId}
        <if test="groupId != null">
            and groupId = #{groupId}
        </if>
    </select>

    <select id="getProjectByNameAndTeamId" parameterType="java.util.Map" resultType="com.kiss.kissnest.entity.Project">
        select * from projects where name = #{name} and teamId = #{teamId} limit 0,1;
    </select>
    
    <select id="getProjectBySlugAndTeamId" parameterType="java.util.Map" resultType="com.kiss.kissnest.entity.Project">
        select * from projects where slug = #{slug} and teamId = #{teamId};
    </select>

    <select id="getProjectByRepositoryId" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects where repositoryId = #{repositoryId};
    </select>
    
    <update id="addRepositoryIdById" parameterType="com.kiss.kissnest.entity.Project">
        update projects
        set
        repositoryId = #{repositoryId}
        where id = #{id};
    </update>
    
    <select id="getProjectsWithoutBuildJob" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects 
        where id not in
        (select projectId from jobs where teamId = #{teamId} and type =1)
        and teamId = #{teamId}
    </select>

    <select id="getProjectsWithBuildJobByTeamId" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects
        where id in
        (select distinct projectId from jobs where teamId = #{teamId} and type =1)
        and teamId = #{teamId}
    </select>

    <select id="getProjectsWithBuildJob" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects
        where id in
        (select projectId from jobs where teamId = #{teamId} and type =1)
        and teamId = #{teamId}
    </select>

    <select id="getProjectsWithDeployJob" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects
        where id in
        (select projectId from jobs where teamId = #{teamId} and type =2)
        and teamId = #{teamId}
    </select>
    
    <select id="getProjectOperatorAccessToken" parameterType="java.lang.String" resultType="java.lang.String">
        select me.accessToken from projects pr
        left join members me
        on pr.operatorId = me.accountId
        where pr.id = #{projectId}
    </select>
    
    <select id="getProjectNameByServerId" parameterType="java.lang.String" resultType="java.lang.String">
        select concat('[',rs.name,']') as name from
        (
        select GROUP_CONCAT(concat('{',re.id,',',re.name,"}")) as name from
        (
        select concat("\"projectName\"",":",pr.name) as name,concat("\"projectId\"",":",pr.id) as id,1 as tmp from jobs jo
        left join projects pr
        on jo.projectId = pr.id
        where jo.serverIds like #{serverId}
        ) re
        group by re.tmp
        ) rs;
    </select>
    
    <select id="getProjectsByGroupId" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Project">
        select * from projects where groupId = #{groupId};
    </select>

    <select id="getProjectOutputs" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.output.ProjectOutput">
        select pr.id,pr.name,pr.teamId,pr.groupId,pr.membersCount,pr.needsCount,pr.issuesCount,pr.operatorId,pr.operatorName,pr.type,pr.slug,gr.name as groupName,
        UNIX_TIMESTAMP(pr.createdAt) * 1000 as createdAt,UNIX_TIMESTAMP(pr.updatedAt) * 1000 as updatedAt
        from projects pr
        left join groups gr
        on pr.groupId = gr.id
        where
        pr.teamId = #{teamId}
        <if test="groupId != null">
            and pr.groupId = #{groupId}
        </if>
    </select>

    <select id="getProjectOutputById" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.output.ProjectOutput">
        select pr.id,pr.name,pr.teamId,pr.groupId,pr.membersCount,pr.needsCount,pr.issuesCount,pr.operatorId,pr.operatorName,pr.type,pr.slug,gr.name as groupName,
        UNIX_TIMESTAMP(pr.createdAt) * 1000 as createdAt,UNIX_TIMESTAMP(pr.updatedAt) * 1000 as updatedAt
        from projects pr
        left join groups gr
        on pr.groupId = gr.id
        where
        pr.id = #{id}
    </select>

</mapper>