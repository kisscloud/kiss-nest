<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 定义一个映射配置文件的根节点 -->
<!-- namespace 属性用来定义配置命名空间， 主要进行 session 级别的缓存管理 -->
<!-- namespace 默认使用当前操作实体类的全路径 -->
<mapper namespace="com.kiss.kissnest.mapper.MemberMapper">

    <insert id="createMember" parameterType="com.kiss.kissnest.entity.Member" keyProperty="id" useGeneratedKeys="true">
        insert into members (accountId,name,teamId,accessToken,operatorId,operatorName)
        value
        (#{accountId},#{name},#{teamId},#{accessToken},#{operatorId},#{operatorName})
    </insert>
    
    <delete id="deleteMemberById" parameterType="java.lang.Integer">
        delete from members where id = #{id}
    </delete>
    
    <update id="updateMember" parameterType="com.kiss.kissnest.entity.Member">
        update members
        set 
        id = #{id}
        <if test="accountId != null">
            ,accountId = #{accountId}
        </if>
        <if test="teamId != null">
            ,teamId = #{teamId}
        </if>
        <if test="operatorId != null">
            ,operatorId = #{operatorId}
        </if>
        <if test="operatorName != null">
            ,operatorName = #{operatorName}
        </if>
        where id = #{id}
    </update>

    <update id="addCount" parameterType="java.util.Map">
        update members
        set
        <if test="type == 'teams'">
            teamCount = teamCount + #{increment}
        </if>
        <if test="type == 'groups'">
            groupsCount = groupsCount + #{increment}
        </if>
        <if test="type == 'projects'">
            projectsCount = projectsCount + #{increment}
        </if>
        <if test="type == 'needs'">
            needsCount = needsCount + #{increment}
        </if>
        <if test="type == 'issues'">
            issuesCount = issuesCount + #{increment}
        </if>
        where id = #{id}
    </update>

    <select id="getMemberById" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Member">
        select * from members where id = #{id};
    </select>
    
    <select id="getMemberByAccountId" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Member">
        select * from members where accountId = #{accountId} limit 0,1;
    </select>
    
    <update id="updateAccessTokenByAccountId" parameterType="java.util.Map">
        update members
        set
        accessToken = #{accessToken}
        where accountId = #{accountId}
    </update>
    
    <select id="getAccessTokenByAccountId" parameterType="java.lang.Integer" resultType="java.lang.String">
        select accessToken from members where accountId = #{accountId}
    </select>

    <update id="updateApiTokenByAccountId" parameterType="java.util.Map">
        update members
        set
        apiToken = #{apiToken}
        where accountId = #{accountId}
    </update>
    
    <select id="getMemberDefaultTeamId" parameterType="java.lang.Integer" resultType="com.kiss.kissnest.entity.Team">
        select te.id,te.name from members me left join teams te on me.teamId = te.id where me.accountId = #{accountId} limit 0,1;
    </select>

    <insert id="createMembers" parameterType="java.util.List" keyProperty="id" useGeneratedKeys="true">
        insert into members (accountId,name,teamId,accessToken,operatorId,operatorName)
        values
        <foreach collection="list" item="m" separator=",">
            (#{m.accountId},#{m.name},#{m.teamId},#{m.accessToken},#{m.operatorId},#{m.operatorName})
        </foreach>
    </insert>

    <select id="getMembers" parameterType="java.util.Map" resultType="com.kiss.kissnest.entity.Member">
        select me.* from members me
        left join membergroups gr
        on me.id = gr.memberId
        left join memberprojects pr
        on me.id = pr.memberId
        where me.teamId = #{teamId}
        <if test="groupId != null">
            and gr.groupId = #{groupId}
        </if>
        <if test="projectId != null">
            and pr.projectId = #{projectId}
        </if>
        group by me.id
    </select>
    
    <select id="getGroupValidMembers" parameterType="java.util.Map" resultType="com.kiss.kissnest.entity.Member">
        select me.id,me.name from memberteams mt
        left join groups gr
        on mt.teamId = gr.teamId
        left join members me
        on mt.memberId = me.id
        where gr.id = #{groupId} and me.name like #{name}
    </select>
    
    <select id="getProjectValidMembers" parameterType="java.util.Map" resultType="com.kiss.kissnest.entity.Member">
        select me.id,me.name from membergroups mg
        left join projects pr
        on mg.groupId = pr.groupId
        left join members me
        on mg.memberId = me.id
        where pr.id = #{projectId} and me.name like #{name}
    </select>
</mapper>